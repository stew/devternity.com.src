---
product: DT_RIX_23
name: DevTernity
nameHint: "The #1 Developer Conference"
description: DevTernity is the top software developer conference focusing on coding, architecture, and engineering practices
slogan: Turning developers into architects and engineering leaders
about: |
  DevTernity is the **#1 international software development conference.**

  Through a series of inspiring talks, discussions, and practical masterclasses led by top minds of our industry, you'll develop skills paramount to your success – **coding, architecture, engineering practices, and tech leadership.**

  Start preparing for an architect, engineering leader, or CTO role today.

  <div class="text-4xl">IT'S A MUST-SEE.</div>
website: https://devternity.com
cfAnalytics: 149e24b8de864f61acf02f4e10ab951c
email: hello@devternity.com
year: 2023
date: "2023-12-07"
prices:
  EUR: 399
  GBP: 360
  USD: 435
priceHint:
partners:
  - title: Google
    link: https://www.google.com
  - title: Logitech
    link: https://www.logitech.com
  - title: DigitalOcean
    link: https://www.digitalocean.com
  - title: Slack
    link: https://www.slack.com
  - title: Microsoft
    link: https://www.microsoft.com
  - title: Atlassian
    link: https://www.atlassian.com
  - title: Pulumi
    link: https://pulumi.com
  - title: Turkish
    link: https://turkishtechnology.com
  - title: Coursera
    link: https://coursera.com
  - title: Gitlab
    link: https://gitlab.com
  - title: DevITUK
    link: https://devitjobs.uk/jobs/all/remote
  - title: DevEvents
    follow: true
    link: https://dev.events/tech
  - title: AWS
    link: https://aws.amazon.com

masterclasses:
  date: "2023-12-08"
  items:
    - instructor:
        name: Jimmy Bogard
        img: Jimmy Bogard.png
      title: "Domain-Driven Design: Theory and Practice"
      from: "14:00"
      to: "21:00"
      sold_out: true
      brief_description: |
        # Domain-Driven Design in Theory and Practice

        Understand the concepts of DDD but feeling overwhelmed to implement? Feeling overwhelmed by complex examples and can't connect how to implement DDD in your project? Looking for more concrete guidance on the concepts and principles of DDD and want to learn how to connect it to real-world code? If this sounds familiar, then this masterclass is for you.

        We cover both the theory and patterns of DDD, and connect it to code with hands-on examples in .NET 6.

        In this masterclass, you'll learn:
        * What problems DDD addresses, when to use it, and when **not** to use it
        * The fundamental DDD building blocks — entities, value objects, domain services, etc.
        * How to integrate DDD into your software delivery
        * How to find and enforce service boundaries
        * How to define bounded contexts between microservices
        * How to craft and enforce a ubiquitous language
        * How to continuously refactor our model as our domain understanding evolves
        * How to pragmatically apply DDD in ASP.NET Core 6 and EF Core 6
        * ...and much more!

        We spend some time on the theory and concepts of DDD and then applying it to a real-world, complex example with hands-on code exercises.

        We will be using .NET as our development platform, but the learned concepts will be applicable to other languages and platforms.

    - instructor:
        name: Marcin Moskala
        img: Marcin Moskala.jpg
      from: "09:00"
      to: "17:00"
      title: "Programming in Kotlin: The Essential Parts"
      almost_sold_out: true
      brief_description: |
        # Programming in Kotlin: The Essential Parts
        In this masterclass you'll learn the essential parts of Kotlin: an elegant, powerful, and a pleasant language to work with. We'll focus on fundamental parts of Kotlin, it's imperative and functional programming capabilities, how Kotlin provides elegance without compromising performance by tactfully channeling the JDK. We will also dive into how to interact between Kotlin and Java code.

        You'll learn:
        * How to work with ease to exploit the power of Kotlin
        * How to write code in idiomatic Kotlin
        * How to use powerful features of Kotlin, including extension functions and nullable types
        * How to write type-safe, maintainable code
        * How to leverage both imperative and functional style as appropriate
        * How to use Kotlin's performance related features
        * Intermix Kotlin with Java code
        * and much more!

        This masterclass is led by Marcin Moskala, an official JetBrains partner for Kotlin training, the author of Effective Kotlin: Best Practices, Kotlin Coroutines, and Advanced Kotlin books.
    - instructor:
        name: J.B. Rainsberger
        img: Rainsberger.png
      title: "Evolutionary Design: Beyond the Basics"
      sold_out: true
      from: "11:00"
      to: "17:00"
      brief_description: |
        # Evolutionary Design: Beyond the Basics

        In this course, we discuss complex tradeoff decisions involved in making evolutionary design a core, everyday programming practice. You’ll learn how to start to make the design flex, how to balance production with protecting your production capacity, and how to expand your view from the elements of simple design to higher-level principles of modularity.

        Key topics:
        * How to crack the chicken-and-egg problem: I need to write tests in order to refactor, and I need to refactor in order to write tests.
        * How to understand when to refactor and when to rewrite, and how to do that safely.
        * How to break through your refactoring rut.
        * How to balanace customer tests (BDD) with programmer tests (TDD).
        * How to tame mock object madness!
        * How to write good tests.
        * How architecture relates to design.
        * How to guide your colleagues to buy into evolutionary design.
        * How to build effective refactoring habits.
        * Learning to trust the habits you’ve built.

        And much more!

    - instructor:
        name: Bartlomiej Slota
        img: Bart.jpg
      title: "Coding Practices for Professional Developers"
      from: "09:00"
      to: "17:00"
      sold_out: true
      brief_description: |
        # Coding Practices for Professional Developers

        Many of us are familiar with the challenges posed by legacy applications. Some have the luxury of starting with a clean slate, but over time, even greenfield projects can morph into something reminiscent of the legacy apps we once struggled with. These shared issues often lead both legacy and greenfield applications to a state where implementing even a minor change becomes a painful endeavor.

        How can we circumvent these challenges? What path should we tread? What are our goals? What defines an exemplary application? Let's collaboratively construct such an application during this masterclass!

        Join us for this masterclass where you will delve into practices that every professional developer should not only comprehend but also implement while building a Java-based business application. Throughout the course, you will:

          * Engage extensively in Test-Driven Development (TDD)
          * Craft tests using contemporary tools like Groovy and Spock
          * Master patterns and practices for writing tests that don't break when you refactor code internals
          * Construct robust business objects and rich domain models and understand the rationale behind it
          * Write business code that is configurable and detached from external systems such as DB or HTTP services
          * Develop a clear understanding of how to properly organize your code in packages and layers
          * ...and much more!

        This masterclass is dedicated to developers able to code and complete exercises in Java.

        Embark on this journey to refine your coding practices and emerge as a more adept professional developer!

    - instructor:
        name: Adam Tornhill
        img: Tornhill.jpg
      title: Prioritizing Technical Debt in Large-Scale Systems
      from: "09:00"
      to: "15:00"
      sold_out: true
      brief_description: |
        # Prioritizing Technical Debt in Large-Scale Systems

        Prioritizing technical debt is a hard problem as modern systems might have millions of lines of code and multiple development teams — no one has a holistic overview. Fortunately, a new set of techniques known as behavioral code analysis are here to help. These combine quality metrics with data on how the engineering organization works with the code. You can then prioritize improvements and risks so that you can balance short- and long-term goals guided by objective data. This new perspective on software development will change how you view code.

        Together we will:
        * Learn the principles of prioritizing technical debt
        * Prioritize technical debt in large-scale systems
        * Balance the trade-off between improving existing code versus adding new features
        * Put quantitative numbers on the costs so that you can make the business case for larger improvements to non-technical stakeholders

        Go through real-world case studies from both Microservices and Monoliths.

        And much more!

    - instructor:
        name: David Neal
        img: David Neal.jpg
      title: Practical Leadership for Developers
      from: "13:00"
      to: "21:00"
      sold_out: true
      brief_description: |
        # Practical Leadership for Developers

        We all have an opportunity every day to make a postive impact on folks around us. These are often called "soft skills," but they can be some of the hardest to learn! We could call them "people skills," "essential skills," or "core skills." But, how about "**SKILLS OF AWESOMENESS?**" Yes, what we all need is more ways we can be awesome to each other, and awesome together.

        You'll learn:
        * Why leadership and awesomeness skills matter to everyone
        * How to become a better leader
        * How to run effective meetings
        * How to deal with conflict and find consensus
        * How to get better at listening and communication
        * How to encourage and motivate others

        And much more!

        Through a series of practical exercises, we will discover and discuss the most important and relevant topics you want to cover, so that you can get the most value out of this masterclass!

        The masterclass is led by David Neal – #1 speaker of 2021.

    - instructor:
        name: Scott Wlaschin
        img: Scott Wlaschin.jpg
      title: Domain Modeling Made Functional
      sold_out: true
      from: "09:00"
      to: "17:00"
      brief_description: |
        # Domain Modeling Made Functional

        Functional programming can be an excellent approach to designing
        decoupled, reusable systems with a rich domain model. This masterclass will
        show you why and how.

        You''ll learn the core concepts of FP, and how to
        apply them to crafting domain logic, capturing business rules, designing business
        workflows, error handling, and much more, including:
        * Introduction to functional programming
        * Functions and types
        * Composition as the fundamental principle
        * Overview of DDD principles
        * The importance of bounded contexts
        * Onion/Hexagonal architecture and how this works with functional programming
        * Modeling requirements with algebraic types
        * Modeling constraints, states, and workflows
        * Keeping IO at the edges
        * Handling domain errors
        * Composing complex functions
        * Evolving the domain
        * Dealing with changes in requirements

        We will be using F# as our development language. The principles will be applicable
        to other languages. No experience with F# needed.
      almost_sold_out: true

    - instructor:
        name: Jakub Nabrdalik
        img: Jakub Nabrdalik.png
      title: Microservices, Modular Monoliths, and Event-Driven Systems
      sold_out: true
      from: "09:00"
      to: "17:00"
      brief_description: |
        # Microservices, Modular Monoliths, and Event-Driven Systems

        In this masterclass, I’ll take you through three different styles of enterprise service architecture: modular monoliths, distributed synchronous systems, and event-driven systems.

        Together, we will design a non-trivial backend system and find out the strengths and weaknesses of each architectural approach. We will discuss the typical mistakes and problems developers face during service architecture design and how to solve them. You will learn how to choose the best architecture style for your project, and how to design hybrid solutions, leveraging the best parts of each architecture style.

        Topics include:
        * Understanding the main styles of service and backend architecture
        * Microservies or monoliths? Is there a middle ground?
        * How to improve monoliths with modularity; Intro to Modular Monoliths
        * How and when to split the system into services with REST/RPC
        * How and when to become event-driven and fully async
        * How to design non-trivial backend and service architecture
        * How to avoid common errors in designing backend and service architectures
        * How to use C4 model to communicate your architecture
        * ...and much more!

        This masterclass covers fundamental concepts, relevant to all programming platforms and languages; developers and architects with different backgrounds can attend.

    - instructor:
        name: Allen Holub
        img: Allen Holub.png
      title: Incremental Architecture
      from: "14:00"
      to: "23:00"
      sold_out: true
      brief_description: |
        # Incremental Architecture

        You can’t simultaneously fight your code and be Agile—it slows you down too much. Your code’s design must evolve incrementally along with your understanding of the product. In this masterclass, you’ll learn **everything you need to create highly adaptable designs**. Along the way, you’ll also experience Event Storming and other Domain-Driven Design techniques.

        You’ll learn:
        * How to design a system that can evolve incrementally
        * SOLDIER principles (Simple, Obvious, Lightweight, Domain focused, Independent, Essential, Refactorable)
        * Architectural patterns appropriate for incremental development
        * How to create strictly-isolated highly decoupled subsystems
        * Domain-focused architectures (including DDD)
        * How to use the domain to maintain system coherence as the architecture grows
        * How to identify key abstractions, bounded contexts, entities, aggregates.

        In all, you’ll learn how to build a coherent and highly maintainable system and architecture that can easily accommodate changing requirements and grow incrementally as the system evolves

    - instructor:
        name: Jakub Pilimon
        img: Jakub Pilimon.jpg
      title: Pragmatic Refactoring Towards Better Architecture
      from: "09:00"
      to: "17:00"
      sold_out: true
      brief_description: |
        # Pragmatic Refactoring Towards Better Architecture

        Are you struggling with your codebase which causes problems
        like poor maintenance, unreadability, performance, and poor testability? After this masterclass, you will be ready to identify and repair architectural
        and code root causes of those issues using proven patterns and techniques from Domain-Driven Design, Test-Driven Development, Object-Oriented Programming, and modularization.

        During code exercises, we will walk through solutions
        to issues like:
        * What to do with a “God Classes”?
        * Modules/classes with huge coupling and with overload of business logic
        * Mismatch between the code model and the business model of the reality
        * How to repair data inconsistency?
        * Inefficient reads from my database?
        * No clear boundaries in my codebase, how to introduce some?
        * and much more!

        The masterclass will start with code that represents a huge legacy system that some of us have to work with on a daily basis. We will gradually refactor it and not only introduce patterns like CQRS, aggregates,
        policies, and parallel change, but also walk through how to talk about refactoring, technical debt, and how to sell our ideas to management.

        The course is for developers able to code and complete exercises in Java, C#, or PHP.

    - instructor:
        name: Dave Farley
        img: Dave Farley.jpg
      from: "09:00"
      to: "17:00"
      title: Modern Software Engineering
      sold_out: true
      brief_description: |
        # Modern Software Engineering

        In this masterclass, guided by continuous delivery expert David Farley, we'll learn durable principles at the heart of effective, modern software development.

        Farley's techniques cohere into a unified, scientific, and foundational approach to solving practical software development problems within realistic economic constraints.

        The topics include:
        * Doing what works to build better software faster
        * Distinguishing good software development ideas from bad ones
        * Building a culture of experimentation and empiricism
        * Staying in control as systems grow more complex
        * Choosing your tools based on sensible criteria
        * Organizing work and systems to facilitate continuing incremental progress
        * Evaluating your progress toward thriving systems, not just more "legacy code"

        And much more!
    - instructor:
        name: Victor Rentea
        img: Victor Rentea.jpg
      title: Clean and Pragmatic Architecture
      from: "08:00"
      to: "16:00"
      sold_out: true
      brief_description: |
        # Clean and Pragmatic Architecture

        In this masterclass, through code examples, hands-on exercises,
        and discussions you''ll learn how to design a clean and pragmatic architecture.

        The topics include:
        * Layered Architecture: strict and relaxed variants
        * Onion Architecture (aka Clean, Hexagonal, Ports-and-Adapters, Universal)
        * Controllers: typical design options with tradeoffs
        * Entities: techniques and best practices for modeling expressive entities
        * Domain Services: how to keep them small, what is the domain logic?
        * Facade vs. Application Service (DDD): a pragmatic evolutionary design strategy
        * DTOs: enemy structures and when to keep them out of our domain
        * Entity/DTO mapping: Best practices, pitfalls of automatic mappers
        * Dependency Inversion Principle: stopping external APIs from polluting our domain
        * Repositories: designing a domain-friendly search DSL
        * Domain Events: mainstream best practices
        * CQRS: separating read/write models
        * and much more!

        This masterclass uses Java as a reference language.
schedule:
  - from: "09:00"
    to: "09:50"
    talks:
      - Adam Tornhill
  - from: "10:10"
    to: "11:00"
    talks:
      - Dave Farley
      - Kristine Howard
  - from: "11:20"
    to: "12:10"
    talks:
      - Gregor Hohpe
  - from: "13:10"
    to: "14:00"
    talks:
      - Robert Martin
      - Jimmy Bogard
      - Thiago Ghisi
  - from: "14:20"
    to: "15:10"
    talks:
      - David Heinemeier Hansson
      - Fred George
  - from: "15:30"
    to: "16:20"
    talks:
      - J.B. Rainsberger
      - Carson Gross
  - from: "16:40"
    to: "17:30"
    talks:
      - John Romero
      - Allen Holub
keynotes:
  - name: Robert Martin
    twitter: unclebobmartin
    bio: Author of Clean Code, Clean Coder, Clean Architecture, and Clean Agile
    title: "Clean Agile: Back to Basics"
    description: |
      # Clean Agile: Back to Basics

      Robert C. Martin (Uncle Bob) reintroduces Agile values and principles for a new generation of programmers and nonprogrammers alike, striping away misunderstandings and distractions that over the years made using Agile difficult.
    img: Robert Martin.png

  - name: Dave Farley
    twitter: davefarley77
    bio: Author of Modern Software Engineering and Continuous Delivery
    title: Modern Software Engineering
    description: |
      # Modern Software Engineering

      In this session, continuous delivery pioneer David Farley illuminates durable principles at the heart of effective, modern software development.

      He distills the discipline into two core exercises: learning and exploration and managing complexity.

      For each, he defines principles that can help you improve everything from your mindset to the quality of your code and describes approaches proven to promote success.
    img: Dave Farley.jpg

  - name: David Heinemeier Hansson
    twitter: dhh
    bio: Creator of Ruby on Rails, Co-founder @ Basecamp, Hey
    img: DHH.png
    title: "A Fireside with David Heinemeier Hansson"
    description: |
      # A Fireside with David Heinemeier Hansson

      Meet our special guest – David Heinemeier Hansson – the creator of Ruby on Rails, CTO and co-founder of Basecamp and Hey. In this fireside chat we'll be talking about the future of Rails, why and how Basecamp has moved from cloud to bare metal, what makes a good developer, hiring, self-development, and life.

  - name: Sandi Metz
    twitter: sandimetz
    bio: Author of 99 Bottles of OOP and Practical Object Oriented Design
    title: All The Little Things
    description: |
      # All The Little Things

      In theory, object-oriented applications consist of small, interchangeable objects which know almost nothing about one another. In reality, many apps contain big classes full of long methods built of many conditionals. Our classes act more like procedures than objects; they know too much, they contain code we can't reuse, they're hard to change and they get worse every time we do so. This talk uses the principles of object-oriented design to break ugly procedures into pleasing objects which have just the right balance of knowledge and ignorance. It bridges the gap between theory and practice and reveals a few simple secrets of OOD that you can use to convert confusing, unmaintainable faux-OO code into understandable, reusable, easily testable objects.
    img: Sandi Metz.jpg

  - name: Allen Holub
    twitter: allenholub
    bio: Principal @ Hollub Associates Ltd, Author of Multiple Books
    img: Allen Holub.png
    title: "#NoEstimates – Why, When, and How"
    description: |
      # #NoEstimates – Why, When, and How

      This keynote presents my (and many other's) thinking about #NoEstimates. It argues that estimation is a bad thing, particularly in the Agile world, and presents ways to plan that don't involve estimation.

  - name: Fred George
    bio: Co-inventor of Microservices, Principal Consultant @ Fred George Consulting
    title: Sabotaging a Transformation
    description: |
      # Sabotaging a Transformation

      Transformations are difficult, and often simply fail. After all, change is usually disruptive. Even an organization that wants to embrace change can see mediocre results. The underlying causes vary from ignorance on how to transform, to full and hostile resistance. In this talk, we will discuss the various causes and the strategies we can use to overcome (or at least mitigate) this resistance to change, and create meaningful transformations with our clients.
    img: Fred George.jpg

  - name: John Romero
    twitter: romero
    bio: Game Designer, Programmer, Co-founder of id Software
    img: John Romero.png
    title: "The Early Days of id Software: Programming Principles"
    description: |
      # The Early Days of id Software: Programming Principles

      As co-founders of id Software, John Romero and John Carmack created the code behind the company's seminal titles. The principles they defined through experience in id’s earliest days built upon one another to produce a unique methodology and a constantly shippable codebase. In this talk, John Romero discusses id software’s early days, these programming principles and the events and games that led to their creation.

  - name: J.B. Rainsberger
    twitter: jbrains
    bio: Software Coach, Mentor, Consultant, TDD Trainer
    img: Rainsberger.png
    title: The Economics of Software Design
    description: |
      # The Economics of Software Design

      Every month, someone new asks me the question, "How do I convince my manager to let me refactor?" While it's true that a manager shouldn't constrain the programmer's plans to deliver high-quality code, the fact remains that some organisations allow their managers to assert this level of micro-control. In this talk I outline a set of models for justifying evolutionary design with basic economic concepts that relate directly to delivering, planning, and funding software projects. This talk will provide you with a solid argument to meet any skeptic's rational objections to writing tests first and letting both low-level design and architecture emerge.

  - name: Gregor Hohpe
    twitter: ghohpe
    bio: Author of The Software Architect Elevator and Enterprise Integration Patterns
    img: Gregor.png
    title: "The Architect Elevator: Redefining The Architect's Role"
    description: |
      # The Architect Elevator: Redefining The Architect's Role

      Many large enterprises are feeling pressure: digital disruptors attack with brand-new business models and no legacy; the Facebook generation” has dramatically increased user expectations; and access to state-of-the-art technologies has been democratized by cloud providers. This is tough stuff for enterprises that have been, and still are, very successful, but are built around traditional technology and organizational structures. “Turning the tanker”, as the need to transform is often described, has become a board room-level topic in many traditional enterprises. Chief IT Architects and CTOs play a key role in such a digital transformation endeavor. They combine the technical, communication, and organizational skills to create business value from a tech stack refresh, to look behind buzzwords like “agile” and “DevOps”, and to build a technology platform that assures quality while moving faster. They do so by riding the “Architect Elevator” from the penthouse, where the business strategy is set, to the engine room, where the enabling technology is implemented. I rode that elevator for 5 years in a major financial services organization and am now advising major corporations on their digital journey. I collect stories from the daily life of IT transformation and package them in lighthearted, but meaningful anecdotes.

  - name: Adam Tornhill
    twitter: adamtornhill
    bio: Author of Code as a Crime Scene, CTO, Creator of CodeScene
    title: "Code Red: The Business Impact of Code Quality"
    description: |
      # Code Red: The Business Impact of Code Quality

      Code quality is an abstract concept that fails to get traction at the business level. Consequently, software companies keep trading code quality for new features. The resulting technical debt is estimated to waste up to 42% of developers’ time, causing stress and uncertainty, as well as making our job less enjoyable than it should be. Without clear and quantifiable benefits, it’s hard to build a business case for code quality.

      In this talk, Adam takes on the challenge by tuning the code analysis microscope towards a business outcome. We do that by combining novel code quality metrics with analyses of how the engineering organization works with the code. We then take those metrics a step further by connecting them to values like time-to-market, customer satisfaction, and road-map risks. This makes it possible to a) prioritize the parts of your system that benefit the most from improvements, b) communicate quality trade-offs in terms of actual costs, and c) identify high-risk parts of the application so that we can focus our efforts on the areas that need them the most. All recommendations are supported by data and brand-new research on real-world codebases. This is a perspective on software development that will change how you view code. Promise.
    img: Tornhill.jpg

  - name: Julia Kirsina
    twitter: unicorncoding
    bio: Software Craftswoman, Tech Influencer @ Instagram
    img: Julia.jpg

  - name: Thiago Ghisi
    twitter: thiagoghisi
    bio: Director of Engineering @ Nubank, ex-Apple, ex-ThoughtWorks
    img: Thiago.png
    title: The Road From Dev to Engineering Director
    description: |
      # The Road From Dev to Engineering Director

      Looking at my LinkedIn Profile and seeing my current title as "Director of Engineering," you might feel that my career was an easy straight line from Dev to Director. You are wrong!

      I had many turns back and forth. In the 15 years of my career, I went from being The "Tech Support" guy to Programmer to Project Manager to QA, back to Engineering/DevOps and Agile Consulting, and finally to Engineering Management in the Mobile space, where I finally found myself in the last five years.

      In this talk, I will tell you how all the left and right turns I took on the road prepared me to be where I'm with a much more solid foundation than the 'straight-line career path approach" would ever do.

  - name: Kristine Howard
    bio: Head of Developer Relations at Amazon Web Services (AWS)
    img: Kris.png
    title: "How to Interview Developers (and enjoy it)"
    description: |
      # How to Interview Developers (and enjoy it)

      If you've been in the tech industry for any length of time, you've probably been asked to participate in interviewing. Lucky folks will receive some basic training from their employer, but most are expected to just figure it out. It can be time-consuming, nerve-wracking, and tedious. You probably don't enjoy doing it, and that can lead to bad hires and painful experiences. Kris has participated in more than 250 interviews at AWS - as both an interviewer and a hiring manager - and has finally come to embrace the process. She'll provide practical tips you can use to conduct more effective interviews, saving you time and making the whole process a lot more enjoyable.

  - name: Jimmy Bogard
    twitter: jbogard
    bio: Chief Architect @ Headspring, Microsoft MVP, Creator of MediatR and AutoMapper
    title: Vertical Slice Architecture
    description: |
      # Vertical Slice Architecture

      Moving from a layered architecture to a vertical slice architecture can be a bit daunting. We remove abstractions, complex structures, and focus building on the axis of change, then what's next? What new structures, patterns, and policies will need to be introduced in this style of architecture? How will we deal with common business functionality, and where do concepts like CQRS and DDD fit in? In this session, we'll introduce the idea of vertical slice architectures, and dive into the patterns, tools, and techniques used with slices. We'll also cover how you can fit vertical slices into different kinds of systems, from desktop, SPA, and normal MVC applications. Finally, we'll look at some of the new challenges that come with slices and layers, and how a different approach provides a much more maintainable end result.
    img: Jimmy Bogard.png

  - name: Carson Gross
    bio: Creator of Htmx, Principal @ Big Sky Software
    img: Carson.png
    title: Solving JS Fatigue Using Fundamental Web Architecture and Htmx
    description: |
      # Solving JS Fatigue Using Fundamental Web Architecture and Htmx

      SPA architecture and the JSON API have allowed much more sophisticated web applications to be built and the approach has been formalized by libraries such as React and Vue. In the last few years, however, we have seen the rise of an associated phenomena: Javascript Fatigue in which developers admit to being overwhelmed by the complexity of the SPA architecture. Join this talk to learn how to compress the complexity of web development without losing all the benefits of SPA.

faq:
  - q: What time zone will the conference take place in?
    a: |
      The conference will take place in **Greenwich Mean Time (GMT) timezone.**

      Because no timezone works equally well for everyone, you are in good company with attendees from 75+ countries, including caffeinated attendees joining at night. If you can't survive the whole day for various reasons (family, timezone, etc.), you can watch the missing parts later.
  - q: Will the sessions be recorded for watching later?
    a: Yes, all main day sessions will be recorded and shared with attendees within 48h. Masterclasses won't be recorded.
  - q: Can I switch between tracks?
    a: Yes, you will be able to switch between tracks on the fly.
  - q: Can I change the ticket holder (attendee)?
    a: Yes, you can change the attendee info by typing a new name/email on the e-ticket. You don't have to inform conference organizers on this occasion.
  - q: Can I buy one ticket and watch the conference with colleagues who don't hold tickets?
    a: No. You have to purchase a ticket for every viewer (attendee). Be a good citizen.
  - q: Will I receive a certificate of attendance?
    a: Yes, you will receive a verifiable certificate for both the main day and the masterclass.
  - q: Is there a Code of Conduct I should follow?
    a: "Yes. In short, be nice and respect people. [Read the full version](coc.html)."
  - q: Who is behind the conference?
    a: DevTernity is led by a small team of software engineers from Singapore, Estonia, and the Netherlands. We're 100% self-funded and vendor-independent. Accepting no sponsorship is a prerequisite for maintaining unbiased views and exceptional quality of all sessions.
  - q: How do I pay for the conference?
    a: After registration, you'll receive a tax invoice that you can pay by Visa/Mastercard/AMEX or via bank transfer.
  - q: How do I convince my manager to send me to DevTernity?
    a: To make it easy to ask for company funding, [download this template](https://docs.google.com/document/d/1jiutKeFzrVl8_uY0n7Ye3v_oXdMJQcbNhfy2Ec3P7xE/edit).
  - q: How can I follow the news and updates?
    a: |
      <div class="flex gap-4 items-center">
        <a href="https://twitter.com/devternity" target="noopener noreferrer nofollow"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-twitter"><title>Go to conference's Twitter</title><path d="M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"></path></svg></a>
        <a href="https://instagram.com/devternity" target="noopener noreferrer nofollow"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-instagram"><title>Go to conference's Instagram</title><rect x="2" y="2" width="20" height="20" rx="5" ry="5"></rect><path d="M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"></path><line x1="17.5" y1="6.5" x2="17.51" y2="6.5"></line></svg></a>
        <a href="https://facebook.com/devternity" target="noopener noreferrer nofollow"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-facebook"><title>Go to conference's Facebook page</title><path d="M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"></path></svg></a>
        <a href="https://linkedin.com/groups/8371335" target="noopener noreferrer nofollow"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-linkedin"><title>Go to conference's LinkedIn group</title><path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"></path><rect x="2" y="9" width="4" height="12"></rect><circle cx="4" cy="4" r="2"></circle></svg></a>
      </div>
  - q: How can I become a speaker?
    a: We don't have call-for-papers (CfP). Instead, we follow the "Hollywood Principle" – don't call us, we'll call you.
  - q: How can I contact organizers?
    a: |
      <code><a class="flex gap-4 items-center" href="mailto:hello@devternity.com"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-send"><line x1="22" y1="2" x2="11" y2="13"></line><polygon points="22 2 15 22 11 13 2 9 22 2"></polygon></svg> hello@devternity.com</a></code>
